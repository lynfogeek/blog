I"‰<blockquote>
  <p><strong>OBSELETE</strong>: With the Design Support Library announced during IO15 comes the <a href="http://developer.android.com/reference/android/support/design/widget/CollapsingToolbarLayout.html">CollapsingToolbarLayout</a> which is much more powerful, elegant and easier to use. Use it!</p>
</blockquote>

<p>The <code>ToolBar</code> is a widget introduced by Google through the app-compat version 21 last fall. It basically replaces the good old <code>ActionBar</code> and bring much more controls on it. Styling and customisation is also much easier because you directly integrate the <code>ToolBar</code> into your view hierarchy, giving you all the benefits of the View class.</p>

<p>One issue with this extended version of the action bar is the <code>height</code> it can takes on the screen. And collapsing the toolbarâ€™s content while scrolling a list is tricky.</p>

<h3 id="objectives">Objectives:</h3>

<p>Fade out the white text when we start scrolling and display the toolbarâ€™s title.
Reverse it when the we scroll up to the top.
Make the Floating Action Button follow the edge of the header.
Support properly the elevation on Lollipop.</p>

<p><em>TL;DR:</em> The whole source code is available on <a href="https://github.com/lynfogeek/CollapsingHeader">my github</a>.</p>

<p><img src="http://localhost:4000/assets/media/collapsing_header.png" alt="Result" /></p>

<p>First step, from a layout perspective, it is pretty simple and straight forward: I use a <code>ToolBar</code>, a <code>ListView</code> and a Floating Action Button:</p>

<pre><code>&lt;RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
xmlns:app="http://schemas.android.com/apk/res-auto"
xmlns:tools="http://schemas.android.com/tools"
xmlns:fab="http://schemas.android.com/apk/res-auto"
android:layout_width="match_parent"
android:layout_height="match_parent"
android:orientation="vertical"
tools:context=".MainActivity"&gt;

&lt;android.support.v7.widget.Toolbar
    android:id="@+id/toolbar"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:elevation="4dp"
    android:background="?attr/colorPrimary"
    app:theme="@style/ThemeOverlay.AppCompat.Dark.ActionBar"/&gt;

&lt;ListView
    android:id="@+id/listview"
    android:layout_below="@+id/toolbar"
    android:layout_width="match_parent"
    android:layout_height="match_parent"/&gt;


&lt;com.getbase.floatingactionbutton.FloatingActionButton
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:id="@+id/favorite"
    android:layout_alignBottom="@+id/toolbar"
    android:layout_alignParentRight="true"
    android:layout_alignParentEnd="true"
    android:layout_marginRight="8dp"
    android:layout_marginEnd="8dp"
    android:elevation="8dp"
    android:layout_marginBottom="-32dp"
    fab:fab_icon="@drawable/ic_favorite_outline_white_24dp"
    fab:fab_colorNormal="@color/accent"
    fab:fab_size="mini"
    /&gt;
&lt;/RelativeLayout&gt;
</code></pre>

<p>Then, I use another layout containing the headerâ€™s <code>TextView</code>s. I inflate it in my Activity and attach it to the <code>ListView</code> using <code>mListView.addHeaderView(view);</code>.</p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
android:layout_width="match_parent"
android:layout_height="wrap_content"
android:elevation="4dp"
android:background="?attr/colorPrimary"&gt;
&lt;LinearLayout
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:id="@+id/container"
    android:orientation="vertical"
    android:paddingLeft="16dp"
    android:paddingRight="16dp"
    android:paddingBottom="16dp" &gt;

    &lt;TextView
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:textColor="@color/icons"
        android:textSize="24sp"
        android:text="@string/title"/&gt;

    &lt;TextView
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_marginTop="16dp"
        android:textColor="@color/icons"
        android:textSize="14sp"
        android:text="@string/description"/&gt;

&lt;/LinearLayout&gt;
&lt;/FrameLayout&gt;
</code></pre>

<p>To react on the scroll event, we need to listen to the <code>AbsListView.OnScrollListener</code>. In the method <code>onScroll</code>. we simply check if the top position of the first list item visible and if it is the item #0. Finally, if its Y position is more than -16dp, we display the headerâ€™s content and hide the <code>ActionBar</code>â€™s title. Otherwise, it is the opposite.</p>

<pre><code>if (view != null &amp;&amp; view.getChildCount() &gt; 0 &amp;&amp; firstVisibleItem == 0) {
    if (view.getChildAt(0).getTop() &lt; -dpToPx(16)) {
        toggleHeader(false, false);
    } else {
        toggleHeader(true, true);
    }
}
</code></pre>

<p>The <code>toggleHeader</code> function is shown below. It starts an <code>ObjectAnimator</code> controlling the alpha property from the current opacity and toggle the visibility of the title.</p>

<pre><code>private void toggleHeader(boolean visible, boolean force) {
if ((force &amp;&amp; visible) || (visible &amp;&amp; mContainerHeader.getAlpha() == 0f)) {
    fade.setFloatValues(mContainerHeader.getAlpha(), 1f);
    fade.start();
} else if (force || (!visible &amp;&amp; mContainerHeader.getAlpha() == 1f)){
    fade.setFloatValues(mContainerHeader.getAlpha(), 0f);
    fade.start();
}
// Toggle the visibility of the title.
if (getSupportActionBar() != null) {
    getSupportActionBar().setDisplayShowTitleEnabled(!visible);
}
}
</code></pre>

<p>To polish the effect, you can coordinate the <code>ToolBar</code> and <code>headerView</code>â€™s elevation and update the Y position of the FAB so it always follow the edge of our header. Hereâ€™s a last snippet of code to do so:</p>

<pre><code>public void onScroll(AbsListView view,
                    int firstVisibleItem,
                    int visibleItemCount,
                    int totalItemCount) {
   if (view != null &amp;&amp; view.getChildCount() &gt; 0 &amp;&amp; firstVisibleItem == 0) {
       int translation = view.getChildAt(0).getHeight() + view.getChildAt(0).getTop();
       mFab.setTranslationY(translation&gt;0  ? translation : 0);
   }

   if (isLollipop()) {
       if (firstVisibleItem == 0) {
           mToolbar.setElevation(0);
       } else {
           mToolbar.setElevation(dpToPx(4));
       }
   }
}
</code></pre>

<p>And this is the <a href="https://github.com/lynfogeek/CollapsingHeader">result</a>:</p>

<p><img src="http://localhost:4000/assets/media/collapsing_header_animated.gif" alt="Final result" /></p>
:ET